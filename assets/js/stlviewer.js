/**
 * MIT License
 * Copyright <2020> <COPYRIGHT Scott Richards>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in the
 * Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
"use strict";function doMaterialChange(e){for(var n=scene.children.length-1;n>=0;n--){var t=scene.children[n];scene.remove(t)}(new THREE.STLLoader).load(model,function(n){var t;1==e?(scene.add(ambientLight),scene.add(mesh1),t=mesh1):2==e&&(scene.add(hemiLight),scene.add(hemiLight2),scene.add(mesh2),t=mesh2);var o=new THREE.Vector3;n.computeBoundingBox(),n.boundingBox.getCenter(o),t.position.x=-1*o.x,t.position.y=-1*o.y,t.position.z=-1*o.z,render()})}function initObject(){var e=new THREE.MeshPhongMaterial({color:bgColor,opacity:.85,transparent:!0,polygonOffset:!0,polygonOffsetFactor:1,polygonOffsetUnits:1}),n=new THREE.MeshPhongMaterial({color:solidColor,specular:solidColor,shininess:100}),t=new THREE.LoadingManager;t.onLoad=function(){document.getElementById("loading").style.display="none"},new THREE.STLLoader(t).load(model,function(e){(mesh2=new THREE.Mesh(e,n)).geometry.computeFaceNormals(),mesh2.geometry.computeVertexNormals(),scene.add(mesh2),scene.remove(mesh2)}),new THREE.STLLoader(t).load(model,function(n){(mesh1=new THREE.Mesh(n,e)).geometry.computeFaceNormals(),mesh1.geometry.computeVertexNormals(),scene.add(mesh1);var t=new THREE.EdgesGeometry(mesh1.geometry),o=new THREE.LineBasicMaterial({color:edgeColor,linewidth:2}),i=new THREE.LineSegments(t,o);mesh1.add(i);var a=new THREE.Vector3;n.computeBoundingBox(),n.boundingBox.getCenter(a),mesh1.position.x=-1*a.x,mesh1.position.y=-1*a.y,mesh1.position.z=-1*a.z;var r=Math.max(n.boundingBox.max.x,n.boundingBox.max.y,n.boundingBox.max.z);camera.position.z=r*distScale,doFrame()})}function doControlCheckbox(){var e=document.getElementById("c1").checked;e!=orbiting&&(orbiting=e,doControlChange())}function doControlChange(){controls.autoRotate=!!orbiting}function doFrame(){controls.update(),renderer.render(scene,camera),requestAnimationFrame(doFrame)}function STLViewerEnable(e){document.getElementById("c1").checked=orbiting,document.getElementById("c1").onchange=function(){doControlCheckbox()},document.getElementById("r1").checked=!0,document.getElementById("r1").onchange=function(){doMaterialChange(1)},document.getElementById("r2").onchange=function(){doMaterialChange(2)};for(var n=document.getElementsByClassName(e),t=0;t<n.length;t++)element=n[t],model=n[t].getAttribute("data-src"),distScale=n[t].getAttribute("data-value"),STLViewer()}function STLViewer(){if(WEBGL.isWebGLAvailable()){try{canvas=document.getElementById("glcanvas"),renderer=new THREE.WebGLRenderer({canvas:canvas,antialias:!0,alpha:!0})}catch(e){return void(document.getElementsByClassName("stlViewer").innerHTML="<h3><b>Sorry, WebGL is required but is not available.</b><h3>")}initScene(element),initObject()}else element.appendChild(WEBGL.getWebGLErrorMessage())}function initScene(){camera=new THREE.PerspectiveCamera(70,element.clientWidth/element.clientHeight,1,1e3),renderer.setSize(element.clientWidth,element.clientHeight),element.appendChild(renderer.domElement),window.addEventListener("resize",function(){renderer.setSize(element.clientWidth,element.clientHeight),camera.aspect=element.clientWidth/element.clientHeight,camera.updateProjectionMatrix()},!1),(controls=new THREE.OrbitControls(camera,renderer.domElement)).enableDamping=!0,controls.rotateSpeed=.1,controls.dampingFactor=.1,controls.enableZoom=!0,controls.enablePan=!1,controls.autoRotate=orbiting,controls.autoRotateSpeed=1,scene=new THREE.Scene,ambientLight=new THREE.AmbientLight(16777215),(hemiLight=new THREE.HemisphereLight(16777215,526368,1.5)).position.z=2,(hemiLight=new THREE.HemisphereLight(16777215,526368,1.5)).position.x=2,scene.add(ambientLight)}var canvas,camera,renderer,scene,distScale,ambientLight,hemiLight,hemiLight2,controls,element,model,mesh1,mesh2,orbiting=!0;const bgColor=1579032,solidColor=4492973,edgeColor=12303291;